datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum RoadmapItemStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  role           Role           @default(USER)
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  roadmaps       Roadmap[]      
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID           String   @unique
  userId                 String
  providerAccountId      String
  credentialPublicKey    String
  counter                Int
  credentialDeviceType   String
  credentialBackedUp     Boolean
  transports             String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Modelo para Roadmap
model Roadmap {
  id          String         @id @default(cuid())
  title       String         
  description String?        // Description generated by the AI model
  isPublic    Boolean        @default(false)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       RoadmapItem[]  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Modelo para cada Ã­tem del Roadmap
model RoadmapItem {
  id         String            @id @default(cuid())
  content    String            // Text or description of the item
  status     RoadmapItemStatus @default(NOT_STARTED)
  order      Int               // Order of the item in the roadmap
  roadmapId  String
  roadmap    Roadmap           @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
}